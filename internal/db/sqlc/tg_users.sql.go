// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: tg_users.sql

package db

import (
	"context"
)

const createTgBotUsers = `-- name: CreateTgBotUsers :exec
INSERT INTO tgbot_users (id, isactive) VALUES ($1, $2)
`

type CreateTgBotUsersParams struct {
	ID       int64 `json:"id"`
	Isactive bool  `json:"isactive"`
}

func (q *Queries) CreateTgBotUsers(ctx context.Context, arg CreateTgBotUsersParams) error {
	_, err := q.db.ExecContext(ctx, createTgBotUsers, arg.ID, arg.Isactive)
	return err
}

const getActiveTgBotUsers = `-- name: GetActiveTgBotUsers :many
SELECT id from tgbot_users WHERE isactive = true
`

func (q *Queries) GetActiveTgBotUsers(ctx context.Context) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, getActiveTgBotUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTgBotUsers = `-- name: UpdateTgBotUsers :exec
UPDATE tgbot_users SET isactive = $1 WHERE id = $2
`

type UpdateTgBotUsersParams struct {
	Isactive bool  `json:"isactive"`
	ID       int64 `json:"id"`
}

func (q *Queries) UpdateTgBotUsers(ctx context.Context, arg UpdateTgBotUsersParams) error {
	_, err := q.db.ExecContext(ctx, updateTgBotUsers, arg.Isactive, arg.ID)
	return err
}
